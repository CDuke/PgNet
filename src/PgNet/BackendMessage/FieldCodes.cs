namespace PgNet
{
    internal static class FieldCodes
    {
        internal const byte Termination = 0;

        /// <summary>
        /// the field contents are ERROR, FATAL, or PANIC (in an error message),
        /// or WARNING, NOTICE, DEBUG, INFO, or LOG (in a notice message),
        /// or a localized translation of one of these. Always present.
        /// </summary>
        public const byte SeverityLocal = (byte)'S';

        /// <summary>
        /// The field contents are ERROR, FATAL, or PANIC (in an error message),
        /// or WARNING, NOTICE, DEBUG, INFO, or LOG (in a notice message).
        /// This is identical to the S field except that the contents are never localized.
        /// This is present only in messages generated by PostgreSQL versions 9.6 and later.
        /// </summary>
        public const byte Severity = (byte)'V';

        /// <summary>
        /// The SQLSTATE code for the error <seealso cref="https://www.postgresql.org/docs/current/errcodes-appendix.html"/> (see Appendix A).
        /// Not localizable. Always present.
        /// </summary>
        public const byte Code = (byte)'C';

        /// <summary>
        /// The primary human-readable error message. This should be accurate but terse (typically one line). Always present.
        /// </summary>
        public const byte Message = (byte)'M';

        /// <summary>
        /// An optional secondary error message carrying more detail about the problem. Might run to multiple lines.
        /// </summary>
        public const byte Detail = (byte)'D';

        /// <summary>
        /// An optional suggestion what to do about the problem.
        /// This is intended to differ from Detail in that it offers advice (potentially inappropriate) rather than hard facts. Might run to multiple lines.
        /// </summary>
        public const byte Hint = (byte)'H';

        /// <summary>
        /// The field value is a decimal ASCII integer, indicating an error cursor position as an index into the original query string.
        /// The first character has index 1, and positions are measured in characters not bytes.
        /// </summary>
        public const byte Position = (byte)'P';

        /// <summary>
        /// his is defined the same as the P field, but it is used when the cursor position refers to an internally generated command
        /// rather than the one submitted by the client. The <see cref="InternalQuery"/> field will always appear when this field appears.
        /// </summary>
        public const byte InternalPosition = (byte)'p';

        /// <summary>
        /// The text of a failed internally-generated command. This could be, for example, a SQL query issued by a PL/pgSQL function.
        /// </summary>
        public const byte InternalQuery = (byte)'q';

        /// <summary>
        /// An indication of the context in which the error occurred.
        /// Presently this includes a call stack traceback of active procedural language functions and internally-generated queries.
        /// The trace is one entry per line, most recent first.
        /// </summary>
        public const byte Where = (byte)'W';

        /// <summary>
        /// If the error was associated with a specific database object, the name of the schema containing that object, if any.
        /// </summary>
        public const byte SchemaName = (byte)'s';

        /// <summary>
        /// If the error was associated with a specific table, the name of the table.
        /// (Refer to the schema name field for the name of the table's schema.)
        /// </summary>
        public const byte TableName = (byte)'t';

        /// <summary>
        /// If the error was associated with a specific table column, the name of the column.
        /// (Refer to the schema and table name fields to identify the table.)
        /// </summary>
        public const byte ColumnName = (byte)'c';

        /// <summary>
        /// If the error was associated with a specific data type, the name of the data type.
        /// (Refer to the schema name field for the name of the data type's schema.)
        /// </summary>
        public const byte DataTypeName = (byte)'d';

        /// <summary>
        /// If the error was associated with a specific constraint, the name of the constraint.
        /// Refer to fields listed above for the associated table or domain. (For this purpose,
        /// indexes are treated as constraints, even if they weren't created with constraint syntax.)
        /// </summary>
        public const byte ConstraintName = (byte)'n';

        /// <summary>
        /// The file name of the source-code location where the error was reported.
        /// </summary>
        public const byte File = (byte)'F';

        /// <summary>
        /// The line number of the source-code location where the error was reported.
        /// </summary>
        public const byte Line = (byte)'L';

        /// <summary>
        /// The name of the source-code routine reporting the error.
        /// </summary>
        public const byte Routine = (byte)'R';
    }
}
